ROM code loaded into 0x0 - 0xFFFFF, 0x20000 - 0x2FFFFF
0x20000 data are changing, controlled by 0x2FFFFE, write 0 1 2 for different pages

[palette]
PALETTES        equ $400000   ;Palette RAM
palette = palatte base + palette in sprite
palette data store together, loading process depends on selected characters & scene

[sprite]
pointer at $3C(a4) of object data


ROM:00006022 obj_draw:                               ; CODE XREF: obj_draw_loop+22↑p
ROM:00006022                 move.w  $64BC(a5),d0
ROM:00006026                 add.w   d0,d0
ROM:00006028                 add.w   d0,d0
ROM:0000602A                 movea.l off_6030(pc,d0.w),a1
ROM:0000602E                 jmp     (a1)
ROM:0000602E ; End of function obj_draw
ROM:0000602E
ROM:0000602E ; ---------------------------------------------------------------------------
ROM:00006030 off_6030:       dc.l obj_draw_0x0       ; head tile & mask by word
ROM:00006034                 dc.l obj_draw_0x1       ; head tile & mask by byte
ROM:00006038                 dc.l obj_draw_0x2       ; word+byte(flag) per tile
ROM:0000603C                 dc.l obj_draw_0x3       ; word per tile
ROM:00006040                 dc.l obj_draw_0x0       ; head tile & mask by word
ROM:00006044                 dc.l obj_draw_0x5       ; word+byte(flag) per tile & mask by word
ROM:00006048                 dc.l obj_draw_0x6       ; word+byte(flag) per tile & mask by byte
ROM:0000604C                 dc.l obj_draw_0x7       ; word per tile & mask by word
ROM:00006050                 dc.l obj_draw_0x8       ; word per tile & mask by byte
ROM:00006054                 dc.l obj_draw_0x9       ; byte per tile & mask by word
ROM:00006058                 dc.l obj_draw_0xA       ; byte per tile & mask by byte


ROM:002D8B98                 dc.b $E0                ; palette
ROM:002D8B99                 dc.b   1                ; draw func
ROM:002D8B9A                 dc.b   6                ; nx
ROM:002D8B9B                 dc.b   8                ; ny
ROM:002D8B9C                 dc.l $E12               ; tile
ROM:002D8BA0                 dc.b $18                ; each column, fill or not
ROM:002D8BA1                 dc.b $30 ; 0
ROM:002D8BA2                 dc.b $30 ; 0
ROM:002D8BA3                 dc.b $F6
ROM:002D8BA4                 dc.b $FE
ROM:002D8BA5                 dc.b $FE

$3c0000        Read/Write location in VRAM. 
$3c0002        Read/Write into VRAM
$3c0004        Value to increment VRAM address by (based on words)

;VRAM zones:
SCB1            equ $0000   ;Sprite tilemaps
FIXMAP          equ $7000
SCB2            equ $8000   ;Sprite shrink values
SCB3            equ $8200   ;Sprite Y positions, heights and flags
SCB4            equ $8400   ;Sprite X positions


0x3C0000 03DE 03DE 0001 F800


RAMSTART        equ $100000   ;68k work RAM

[palatte]

RAMSTART        equ $100000   ;68k work RAM
PALETTES        equ $400000   ;Palette RAM
BACKDROP        equ PALETTES+(16*2*256)-2
MEMCARD         equ $800000   ;Memory card
SYSROM          equ $C00000   ;System ROM
0x500000 & 0x60000 & 0x70000 seem like the same as 0x400000, all repeating 0x2000 bytes of data

ROM:00004C3A                 lea     ($2CFFF0).l,a0
ROM:00004C40                 andi.w  #$FF,d0
ROM:00004C44                 swap    d0
ROM:00004C46                 lsr.l   #6,d0
ROM:00004C48                 adda.l  d0,a0
ROM:00004C4A                 movea.l $5924(a5),a1
ROM:00004C4E                 move.w  #$1F,d0
ROM:00004C52
ROM:00004C52 loc_4C52:                               ; CODE XREF: sub_4C3A+28��j
ROM:00004C52                 move.l  (a0)+,(a1)+     ; a1 = 10c024
ROM:00004C54                 move.l  (a0)+,(a1)+
ROM:00004C56                 move.l  (a0)+,(a1)+
ROM:00004C58                 move.l  (a0)+,(a1)+
ROM:00004C5A                 move.l  (a0)+,(a1)+
ROM:00004C5C                 move.l  (a0)+,(a1)+
ROM:00004C5E                 move.l  (a0)+,(a1)+
ROM:00004C60                 move.l  (a0)+,(a1)+


ROM:0000A2D0                 move.w  (a0)+,(a1)+     ; a0 = 10c024
ROM:0000A2D2                 move.l  (a0)+,(a1)+
ROM:0000A2D4                 move.l  (a0)+,(a1)+
ROM:0000A2D6                 move.l  (a0)+,(a1)+
ROM:0000A2D8                 move.l  (a0)+,(a1)+
ROM:0000A2DA                 move.l  (a0)+,(a1)+
ROM:0000A2DC                 move.l  (a0)+,(a1)+
ROM:0000A2DE                 move.l  (a0)+,(a1)+



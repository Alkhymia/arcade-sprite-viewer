ROM code loaded into 0x0 - 0xFFFFF, 0x20000 - 0x2FFFFF
0x20000 data are changing, controlled by 0x2FFFFE, write 0 1 2 for different pages

[palette]
PALETTES        equ $400000   ;Palette RAM
palette = palatte base + palette in sprite
palette data store together, loading process depends on selected characters & scene

[sprite]
pointer at $3C(a4) of object data


ROM:00006022 obj_draw:                               ; CODE XREF: obj_draw_loop+22↑p
ROM:00006022                 move.w  $64BC(a5),d0
ROM:00006026                 add.w   d0,d0
ROM:00006028                 add.w   d0,d0
ROM:0000602A                 movea.l off_6030(pc,d0.w),a1
ROM:0000602E                 jmp     (a1)
ROM:0000602E ; End of function obj_draw
ROM:0000602E
ROM:0000602E ; ---------------------------------------------------------------------------
ROM:00006030 off_6030:       dc.l obj_draw_0x0       ; head tile & mask by word
ROM:00006034                 dc.l obj_draw_0x1       ; head tile & mask by byte
ROM:00006038                 dc.l obj_draw_0x2       ; word+byte(flag) per tile
ROM:0000603C                 dc.l obj_draw_0x3       ; word per tile
ROM:00006040                 dc.l obj_draw_0x0       ; head tile & mask by word
ROM:00006044                 dc.l obj_draw_0x5       ; word+byte(flag) per tile & mask by word
ROM:00006048                 dc.l obj_draw_0x6       ; word+byte(flag) per tile & mask by byte
ROM:0000604C                 dc.l obj_draw_0x7       ; word per tile & mask by word
ROM:00006050                 dc.l obj_draw_0x8       ; word per tile & mask by byte
ROM:00006054                 dc.l obj_draw_0x9       ; byte per tile & mask by word
ROM:00006058                 dc.l obj_draw_0xA       ; byte per tile & mask by byte


ROM:002D8B98                 dc.b $E0                ; palette
ROM:002D8B99                 dc.b   1                ; draw func
ROM:002D8B9A                 dc.b   6                ; nx
ROM:002D8B9B                 dc.b   8                ; ny
ROM:002D8B9C                 dc.l $E12               ; tile
ROM:002D8BA0                 dc.b $18                ; each column, fill or not
ROM:002D8BA1                 dc.b $30 ; 0
ROM:002D8BA2                 dc.b $30 ; 0
ROM:002D8BA3                 dc.b $F6
ROM:002D8BA4                 dc.b $FE
ROM:002D8BA5                 dc.b $FE

$3c0000        Read/Write location in VRAM. 
$3c0002        Read/Write into VRAM
$3c0004        Value to increment VRAM address by (based on words)

;VRAM zones:
SCB1            equ $0000   ;Sprite tilemaps
FIXMAP          equ $7000
SCB2            equ $8000   ;Sprite shrink values
SCB3            equ $8200   ;Sprite Y positions, heights and flags
SCB4            equ $8400   ;Sprite X positions


0x3C0000 03DE 03DE 0001 F800


RAMSTART        equ $100000   ;68k work RAM

[palatte]

RAMSTART        equ $100000   ;68k work RAM
PALETTES        equ $400000   ;Palette RAM
BACKDROP        equ PALETTES+(16*2*256)-2
MEMCARD         equ $800000   ;Memory card
SYSROM          equ $C00000   ;System ROM
0x500000 & 0x60000 & 0x70000 seem like the same as 0x400000, all repeating 0x2000 bytes of data

ROM:00004C3A                 lea     ($2CFFF0).l,a0
ROM:00004C40                 andi.w  #$FF,d0
ROM:00004C44                 swap    d0
ROM:00004C46                 lsr.l   #6,d0
ROM:00004C48                 adda.l  d0,a0
ROM:00004C4A                 movea.l $5924(a5),a1
ROM:00004C4E                 move.w  #$1F,d0
ROM:00004C52
ROM:00004C52 loc_4C52:                               ; CODE XREF: sub_4C3A+28��j
ROM:00004C52                 move.l  (a0)+,(a1)+     ; a1 = 10c024
ROM:00004C54                 move.l  (a0)+,(a1)+
ROM:00004C56                 move.l  (a0)+,(a1)+
ROM:00004C58                 move.l  (a0)+,(a1)+
ROM:00004C5A                 move.l  (a0)+,(a1)+
ROM:00004C5C                 move.l  (a0)+,(a1)+
ROM:00004C5E                 move.l  (a0)+,(a1)+
ROM:00004C60                 move.l  (a0)+,(a1)+


ROM:0000A2D0                 move.w  (a0)+,(a1)+     ; a0 = 10c024
ROM:0000A2D2                 move.l  (a0)+,(a1)+
ROM:0000A2D4                 move.l  (a0)+,(a1)+
ROM:0000A2D6                 move.l  (a0)+,(a1)+
ROM:0000A2D8                 move.l  (a0)+,(a1)+
ROM:0000A2DA                 move.l  (a0)+,(a1)+
ROM:0000A2DC                 move.l  (a0)+,(a1)+
ROM:0000A2DE                 move.l  (a0)+,(a1)+

















System Information:
Resolution:                         320(304?)x224
Color Palette:                      65,536
Maximum Colors On-Screen:           4,096
Maximum Sprites On-Screen:          380
Minimum Sprite Size:                1x2
Maximum Sprite Size:                16x512
Maximum Amount of Game Planes:      3(?)
Sound Channels:                     4-FM synthesis, 7-Digital, 3-PSG, 1-Noise channel
                                    Yamaha 2610 sound chip.   
Internal RAM:                       Work RAM: 64Kb
58MBit DRAM, 512KBit VRAM and 64KBit SRAM (CD version only).
512KBit DRAM, 512KBit VRAM (Cartridge version).

Graphics information:
$00000 - $DFFF: Blocks of sprite data, each $80 bytes:
    Each $80 block is made up of $20 double words, their format is:
    Word: Sprite number (16 bits)
    Byte: Palette number (8 bits)
    Byte: Bit 0: X flip
          Bit 1: Y flip
          Bit 2: Automatic animation flag (4 tiles?)
          Bit 3: Automatic animation flag (8 tiles?)
          Bit 4: MSB of sprite number (confirmed, Karnov_r, Mslug). See note.
          Bit 5: MSB of sprite number (MSlug2)
          Bit 6: MSB of sprite number (Kof97)
          Bit 7: Unknown for now

    Each double word sprite is drawn directly underneath the previous one,
    based on the starting coordinates.

$7000 - $7a00   : Front plane fix tiles (8*8), 2 bytes each

$8000: Control for sprites banks, arranged in words
    Bit 0 to 3 - Y zoom LSB
    Bit 4 to 7 - Y zoom MSB (ie, 1 byte for Y zoom).
    Bit 8 to 11 - X zoom, $f is full size (no scale).
    Bit 12 to 15 - Unknown, probably unused

$8200: Control for sprite banks, arranged in words
    Bit 0 to 5: Number of sprites in this bank (see note below).
    Bit 6 - If set, this bank is placed to right of previous bank
    (same Y-coord).
    Bit 7 to 15 - Y position for sprite bank.

$8400: Control for sprite banks, arranged in words
    Bit 0 to 5: Unknown
    Bit 7 to 15 - X position for sprite bank.

Memory Locations:
$10FD83     Nationality of the machine (0 = Japanese / 1 & 2 = English)
$10FDAE     Set to zero before booting to force complete initialization.
$10FE80     Set to FF to activate debug mode.
$10F6EE     (DWORD) Contains a copy of 68000 (IRQ Vector).
$300000     (Write) Watchdog Reset
$300001   
$300000        Controller #1
            bit 7 : Button D
            bit 6 : Button C
            bit 5 : Button B
            bit 4 : button A
            bit 3 : Right
            bit 2 : Left
            bit 1 : Down
            bit 0 : Up

$300001        Dipswitches
            bit 0 : Selftest
            bit 1 : Unknown (Unused ?) \ something to do with
            bit 2 : Unknown (Unused ?) / auto repeating keys ?
            bit 3 : \
            bit 4 :  | communication setting ?
            bit 5 : /
            bit 6 : free play
            bit 7 : stop mode ?
                          
$300080        Controller #4   - Test switch in here
$300081   
$31001c        Unknown (ghost pilots)
$320000        Sound CPU
$320001
$320001
    The Neo Geo contains an NEC 4990 Serial I/O calendar & clock accesed
    through $320001, $380050, $280050 (shadow adress). A schematic
    for this device can be found on the NEC webpages.
            bit 0 : COIN 1
            bit 1 : COIN 2
            bit 2 : SERVICE
            bit 3 : UNKNOWN
            bit 4 : UNKNOWN
            bit 5 : UNKNOWN
            bit 6 : 4990 test pulse bit.
            bit 7 : 4990 data bit.


$340000        Controller #2 (same bits as $300000)
$380000        Status byte
            0 PAD1 START
            1 PAD1 SELECT
            2 PAD2 START
            3 PAD2 SELECT
            4 --\  MEMORY CARD
            5 --/  INSERTED
            6 MEMORY CARD WRITE PROTECTION
            7 UNUSED (?)
$380011        Backup bank select
$380051        4990 control write register
            bit 0: C0
            bit 1: C1
            bit 2: C2
            bit 3-7: unused.

            $00 = register hold.
            $02 = shift.
            $03 = time read (reset register).
            $04 = ????.

$3a0001        Enable display.
$3a0003        Swap in Bios ($80 bytes vector table of BIOS)
$3a000a        Select board FIX char rom
$3a000b   
$3a000c        Neogeo Sram Lock
$3a000d
$3a000e        Neogeo Setpalbank1
$3a000f   
$3a001a        Select game FIX char rom
$3a001b
$3a001c        Neogeo Sram Unlock
$3a001d
$3a001e        Neogeo SetPalbank0 Palette banking
$3a001f
$3a0011        Disable display
$3a001b        set bios vector table (?)  mirror ?
$3a001d        unlock backup ram
$3a0013        Swap in Rom  ($80 bytes vector table of ROM bank)
$3c000c        IRQ acknowledge
            4 = IRQ 1
            2 = IRQ 2
            1 = IRQ 3 (does any game use this?)

$3c000e $3c000f  Control R
    The format of this very important location is:  AAAA AAAA B??? CDDD

    A is most likely the video beam line, however from how it is used it
    doesn't seem to be a 0-255 direct map: the top bit is often masked out.

    I think the top bit of A is: (vblank OR irq2). sdodgeb loops waiting for
    it to be 1; zedblade heavily depends on it to work correctly.

    B is used together with A in one place, so most likely video beam position

    Maybe AAAAAAAAB is a 9-bit video line counter.
    It is tested individually in many cases (e.g. samsho3) so it might not be
    the low bit of the raster line.

    C is definitely a PAL/NTSC flag. Evidence:
        1) trally changes the position of the speed indicator depending on
           it (0 = lower 1 = higher).
        2) samsho3 sets a variable to 60 when the bit is 0 and 50 when
           it's 1. This is obviously the video refresh rate in Hz.
        3) samsho3 sets another variable to 256 or 307. This could be the
           total screen height (including vblank), or close to that.
           Some game (e.g. lstbld2, samsho3) do this (or similar):
           bclr    #$0, $3c000e.l
           when the bit is set, so 3c000e (whose function is unknown) has to
           be related
    D is unknown (counter of some kind, used in a couple of places).
        in blazstar, this controls the background speed in level 2.

IO addresses
$3c0000        Read/Write location in VRAM. 
$3c0002        Read/Write into VRAM
$3c0004        Value to increment VRAM address by (based on words)
$3c0006        Unknown, set vblank counter (?)
$3c0008        shadow adress for $3c0000.
$3c000a        shadow adress for $3c0002.

68k Addresses
$000000 $0fffff   Rom bank 1
$100000 $10ffff   Ram bank 1
$200000 $2fffff   Rom bank 2
$2ffff0 $2fffff   Neo Bankswitch Write
$400000 $401fff   Neogeo Palette Ram Read
$800000 $800fff   NeoGeo Memcard Read
    Memory card is a 2kb battery backed RAM.
    It is accessed thru $800000-$800FFF.
    Even bytes are always $FF
    Odd bytes are memcard data ($800 bytes)

$c00000 $c1ffff   System Bios Rom
$d00000 $d0ffff   64k battery backed SRAM

trally writes to 200000-200003 as well, probably looking for a serial
link both games write to 0000fe before writing to 200000. The two
things could be related. Sidekicks reads and writes to several
addresses in this range, using this for copy protection.

Z80 Addresses
    $0000  $7fff  Rom
    $8000  $bfff  Bank 5
    $c000  $dfff  Bank 6
    $e000  $efff  Bank 7
    $f000  $f7ff  Bank 8
    $f800  $ffff  Ram

Character layout
    8 x 8 chars
    4096 in total
    4 bits per pixel (planes are packed in a nibble)    
    32 bytes per char

Sprite Layout
    16 x 16
    4 bits per pixel
    128 bytes per sprite

$00  Stack pointer
$04  Initial PC ($C11002)
$64  VBlank pointer
$100 "NEO-GEO",0
$108 NGH Number, a unique number assigned to each cart. (WORD) (Thanks to Apollo69 for this info.)
$10A ?
$10C ?
$10E Pointer to debug dip switches ?
$112 ?
$114 Starting Sprite Number / $100 for the Neo Geo logo.
     Logo is (64 x 64 chars. 4096 bytes total in each bank).
$116 Pointer to Japanese name
$11A Pointer to English name
$122 Entry point of the software
$182 Pointer to security code.